// src/main/java/com/cr/service/impl/MedicalHistoryServiceImpl.java
package com.cr.service;

import com.appointment.entity.Appointment;
import com.cr.entity.Consultation;
import com.cr.entity.MedicalHistory;
import com.example.demo.entity.User;
import com.example.demo.entity.Patient;
import com.cr.repository.ConsultationRepository;
import com.cr.repository.MedicalHistoryRepository;
import com.example.demo.repository.PatientRepository;
import com.example.demo.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.NoSuchElementException;

@Service
public class MedicalHistoryServiceImpl implements MedicalHistoryService {

    @Autowired
    private MedicalHistoryRepository medicalHistoryRepository;

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private PatientRepository patientRepository;

    @Autowired
    private ConsultationRepository consultationRepository;


    @Override
    @Transactional
    public MedicalHistory createMedicalHistory(MedicalHistory medicalHistory) {
        // Fetch and set the actual User entity based on the provided tempPatientId
        // This is crucial for establishing the JPA relationship
        Patient patient = patientRepository.findBypatientId(medicalHistory.getPatient().getPatientId())
                .orElseThrow(() -> new NoSuchElementException("Patient not found with ID: " + medicalHistory.getPatient()));
        //Appointment appointment = consultationRepository.findByAppointment(consultation.getAppointment());
        medicalHistory.setPatient(patient);

        // Fetch and set the actual Consultation entity if consultationId is provided
//        Consultation consultation = null;
//        if (medicalHistory.getTempConsultationId() != null) {
//            consultation = consultationRepository.findById(medicalHistory.getTempConsultationId())
//                    .orElseThrow(() -> new NoSuchElementException("Consultation not found with ID: " + medicalHistory.getTempConsultationId()));
//        }
//        medicalHistory.setConsultation(consultation);

        // MedicalHistory ID will be generated by the database upon saving
        medicalHistory.setMedicalHistoryId(null); // Ensure ID is null for new entity
        return medicalHistoryRepository.save(medicalHistory);
    }

    @Override
    public MedicalHistory getMedicalHistoryById(Long id) {
        return medicalHistoryRepository.findByMedicalHistoryId(id)
                .orElseThrow(() -> new NoSuchElementException("Medical History not found with ID: " + id));
    }

    @Override
    public List<MedicalHistory> getMedicalHistoryByPatientId(Long patientId) {
        // Ensure patient exists before querying for their medical history
        userRepository.findById(patientId)
                .orElseThrow(() -> new NoSuchElementException("Patient not found with ID: " + patientId));
        return medicalHistoryRepository.findByPatient_patientId(patientId);
    }

    @Override
    @Transactional
    public MedicalHistory updateMedicalHistory(Long id, MedicalHistory medicalHistoryDetails) {
        MedicalHistory existingMedicalHistory = medicalHistoryRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Medical History not found with ID: " + id));

        // Manually copy properties for partial updates.
        // If a field in medicalHistoryDetails is null, it means the client didn't send it,
        // so we don't update the existing value.
        // This is where DTOs with their specific fields shine for partial updates.
//        if (medicalHistoryDetails.getEntryDate() != null) {
//            existingMedicalHistory.setEntryDate(medicalHistoryDetails.getEntryDate());
//        }
        if (medicalHistoryDetails.getDiagnosis() != null) {
            existingMedicalHistory.setDiagnosis(medicalHistoryDetails.getDiagnosis());
        }
//        if (medicalHistoryDetails.getNotes() != null) {
//            existingMedicalHistory.setNotes(medicalHistoryDetails.getNotes());
//        }
        if (medicalHistoryDetails.getAllergies() != null) {
            existingMedicalHistory.setAllergies(medicalHistoryDetails.getAllergies());
        }
        if (medicalHistoryDetails.getBreathingConditions() != null) {
            existingMedicalHistory.setBreathingConditions(medicalHistoryDetails.getBreathingConditions());
        }
//        if (medicalHistoryDetails.getImmunizations() != null) {
//            existingMedicalHistory.setImmunizations(medicalHistoryDetails.getImmunizations());
//        }
        if (medicalHistoryDetails.getPastTreatments() != null) {
            existingMedicalHistory.setPastTreatments(medicalHistoryDetails.getPastTreatments());
        }
        // ... continue for all updatable fields

        return medicalHistoryRepository.save(existingMedicalHistory);
    }

    @Override
    @Transactional
    public void deleteMedicalHistory(Long id) {
        if (!medicalHistoryRepository.existsById(id)) {
            throw new NoSuchElementException("Medical History not found with ID: " + id);
        }
        medicalHistoryRepository.deleteById(id);
    }
}